{{> authmenu id="locations"}}

<div>
  <div style="text-align: end;">
    <a href="/location/{{location._id}}/history">View History For This Location</a>
  </div>
  <div id="devices"></div>
</div>

<section class="container w-50 mt-4">
    {{! Form to add an mqtt device subscription }}
  <form action="/locations/{{location._id}}/add" method="POST">
    <label class="form-heading">Add an IOT Device to <b>{{location.name}}</b></label>
      <div class="form-group">
        <label for="name">Name</label>
        <input
          type="text"
          class="form-control"
          name="name"
          placeholder="Enter device name e.g. Motion Sensor"
        />
      </div>
      <div class="form-group">
          <label for="subscription">Subscription</label>
          <input
          type="text"
          class="form-control"
          name="subscription"
          placeholder="Enter device subscription topic e.g. zigbee2mqtt/MotionSensor"
          />
      </div>
      <div class="form-group">
          <label for="parameter">Parameter</label>
          <input
          type="text"
          class="form-control"
          name="parameter"
          placeholder="Enter parameter to monitor e.g. occupancy"
          />
      </div>
      <div class="form-group">
        <label for="type">Type</label>
        <select class="form-control" name="type">
          <option value="boolean">True/False</option>
          <option value="onoff">On/Off</option>
          <option value="data">Data Stream</option>
        </select>
      </div>
      <div class="button-container">
        <button type="submit" class="btn btn-primary">Submit</button>
      </div>
  </form>
  </div>
</div>
  
</section>

<script>

let client;

function connect() {

    let host = 'wss://{{user.broker.url}}:{{user.broker.port}}';
    if ('{{user.broker.root}}') {
      host += '/{{user.broker.root}}';
    }
    console.log(host)
    const options = {
    keepalive: 30,
    clientId: '{{user._id}}',
    protocolId: 'MQTT',
    protocolVersion: 4,
    clean: false,
    reconnectPeriod: 1000,
    connectTimeout: 30 * 1000,
    will: {
        topic: 'WillMsg',
        payload: 'Connection Closed abnormally..!',
        qos: 0,
        retain: false
    },
    rejectUnauthorized: false
    }

    console.log('Connecting MQTT Client: '+host)
    client = mqtt.connect(host, options)

    client.on('error', (err) => {
    console.log('Connection error: ', err)
    client.end()
    })

    client.on('reconnect', () => {
    console.log('Reconnecting...')
    })

    client.on('connect', () => {
    console.log('Client Connected')
    subscribe()

    })

    client.on('close', () => {
    console.log('Disconnected')
    })
}

function subscribe(topic) {

    devices = {{{json location.devices}}};
    let topics = [];
    createDivs(devices);

    for (var i = 0; i < devices.length; i++) {
        client.subscribe(devices[i].subscription, { qos: 2 })
        topics.push(devices[i].subscription)
        if (devices[i].history) {
          if (devices[i].history.length > 0) {
            updateDivs(devices[i], devices[i].history[devices[i].history.length-1]);
          }
        }
    }

    client.on('message', (topic, message, packet) => {
      console.log('Received Message: ' + message.toString() + '\nOn topic: ' + topic)

      if (topics.includes(topic)) {

        // Parse received message to JSON to get the topic
        const jsonMessage = JSON.parse(message)
        const relevantDevice = devices.find(device => device.subscription === topic)

        updateDivs(relevantDevice, { value: jsonMessage[relevantDevice.parameter] });

        // Make a POST request to the server to update the database
        fetch('/liveupdatedevice', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            _id: relevantDevice._id,
            location_id: '{{location._id}}',
            value: jsonMessage[relevantDevice.parameter]
          })
        })
        .then(res => res.json())
        .then(data => console.log(data))
        .catch(err => console.log(err))
      }

    })
}

function createDivs(divs) {
    for (var i = 0; i < divs.length; i++) {

      if (divs[i].type === "boolean") {
        let div = generateBooleanDiv(divs[i]);
        document.getElementById('devices').appendChild(div)
      }
      else if (divs[i].type === "onoff") {
        let div = generateOnOffDiv(divs[i]);
        document.getElementById('devices').appendChild(div)
      }
      else if (divs[i].type === "data") {
        let div = generateDataDiv(divs[i]);
        document.getElementById('devices').appendChild(div)
      }
    }
}

function updateDivs(device, message) {
  console.log(device, message)
  if (device.type === 'boolean') {
    if (message.value) {
      document.getElementById(device._id).classList.add('boolean-true')
    } else {
      document.getElementById(device._id).classList.remove('boolean-true')
    }
  }
  if (device.type === 'onoff') {
    document.getElementById(device._id).checked = message.value.toLowerCase() == "on" ? true : false;
  }
  if (device.type === 'data') {
    document.getElementById(device._id).innerHTML = message.value;
  }
}

function generateBooleanDiv(device) {

    const container = document.createElement('div')
    container.className = 'device-container'
    const heading = document.createElement('h4')
    heading.innerHTML = device.name
    container.appendChild(heading)

    const i = document.createElement('i')
    i.className = "bi bi-check-circle-fill boolean-icon"
    i.id = device._id

    container.appendChild(i)
    container.appendChild(editDeleteButtons(device))

    return container
}

function generateOnOffDiv(device) {

    const container = document.createElement('div')
    container.className = 'device-container'
    const heading = document.createElement('h4')
    heading.innerHTML = device.name

    const label = document.createElement('label')
    label.className = "switch"

    const checkbox = document.createElement('input')
    checkbox.id = device._id
    checkbox.type = "checkbox"
    checkbox.disabled = true

    const line = document.createElement('span')
    line.className = "slider round"

    label.appendChild(checkbox)
    label.appendChild(line)

    container.appendChild(heading)
    container.appendChild(label)
    container.appendChild(editDeleteButtons(device))

    return container
}

function generateDataDiv(device) {

    const container = document.createElement('div')
    container.className = 'device-container'
    const heading = document.createElement('h4')
    heading.innerHTML = device.name

    const label = document.createElement('label')
    label.className = "data-label"
    label.id = device._id
    label.innerHTML = "Loading"

    container.appendChild(heading)
    container.appendChild(label)
    container.appendChild(editDeleteButtons(device))

    return container
}

function editDeleteButtons(device) {
    const buttons = document.createElement('div')
    buttons.className = 'device-buttons'

    const editButton = document.createElement('i')
    editButton.className = 'bi bi-pencil'
    editButton.onclick = function() {
      window.location.href = '/location/{{{location._id}}}/' + device._id
    }

    const deleteButton = document.createElement('i')
    deleteButton.className = 'bi bi-x-circle'
    deleteButton.onclick = function() {
      if (confirm('Are you sure you want to delete this device?')) {
        window.location.href = '/location/{{{location._id}}}/' + device._id + '/delete'
      }
    }

    buttons.appendChild(editButton)
    buttons.appendChild(deleteButton)

    return buttons
}

connect()

</script>
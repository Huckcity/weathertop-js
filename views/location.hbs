{{> authmenu id="locations"}}

<div id="devices"></div>

<section class="container w-50 mt-4">

  {{! Form to add an mqtt device subscription }}
  <form action="/locations/{{location._id}}/add" method="POST">
    <label>Add a Device to <b>{{location.name}}</b></label>
      <div class="form-group">
        <label for="name">Name</label>
        <input
          type="text"
          class="form-control"
          name="name"
          placeholder="Enter device name e.g. Motion Sensor"
        />
      </div>
      <div class="form-group">
          <label for="subscription">Subscription</label>
          <input
          type="text"
          class="form-control"
          name="subscription"
          placeholder="Enter device subscription topic e.g. zigbee2mqtt/MotionSensor"
          />
      </div>
      <div class="form-group">
          <label for="parameter">Parameter</label>
          <input
          type="text"
          class="form-control"
          name="parameter"
          placeholder="Enter parameter to monitor e.g. occupancy"
          />
      </div>
      <div class="form-group">
        <label for="type">Type</label>
        <select class="form-control" name="type">
          <option value="boolean">True/False</option>
          <option value="onoff">On/Off</option>
          <option value="data">Data Stream</option>
        </select>
      </div>
    <button type="submit" class="btn btn-primary">Submit</button>
  </form>

</section>

<script>

let client;
let divs = [];

function connect() {
    const host = 'wss://mqtt.huckcity.ie:9001';

    const options = {
    keepalive: 30,
    //clientId: clientId,
    protocolId: 'MQTT',
    protocolVersion: 4,
    clean: true,
    reconnectPeriod: 1000,
    connectTimeout: 30 * 1000,
    will: {
        topic: 'WillMsg',
        payload: 'Connection Closed abnormally..!',
        qos: 0,
        retain: false
    },
    rejectUnauthorized: false
    }

    console.log('Connecting MQTT Client')
    client = mqtt.connect(host, options)

    client.on('error', (err) => {
    console.log('Connection error: ', err)
    client.end()
    })

    client.on('reconnect', () => {
    console.log('Reconnecting...')
    })

    client.on('connect', () => {
    console.log('Client Connected')
    })


    client.on('close', () => {
    console.log('Disconnected')
    })
}

function subscribe(topic) {
    //client.subscribe('zigbee2mqtt/MotionSensor', { qos: 0 })
    //client.publish('testtopic', 'ws connection demo...!', { qos: 0, retain: false })

    devices = {{{json location.devices}}};

    for (var i = 0; i < devices.length; i++) {
        divs.push({
          id: devices[i]._id,
          name: devices[i].name,
          sub: devices[i].subscription,
          param: devices[i].parameter,
          type: devices[i].type,
        });
        client.subscribe(devices[i].subscription, { qos: 0 })
    }

    createDivs(divs);

    client.on('message', (topic, message, packet) => {
      console.log('Received Message: ' + message.toString() + '\nOn topic: ' + topic)
      const jsonMessage = JSON.parse(message)
      const relevantDiv = divs.find(div => div.sub === topic)
      if (relevantDiv.type === 'boolean') {
        console.log(jsonMessage[relevantDiv.param])
        if (jsonMessage[relevantDiv.param]) {
          document.getElementById(relevantDiv.id).classList.add('boolean-true')
        } else {
          document.getElementById(relevantDiv.id).classList.remove('boolean-true')
        }
      }
      if (relevantDiv.type === 'onoff') {
        document.getElementById(relevantDiv.id).checked = jsonMessage[relevantDiv.param].toLowerCase() == "on" ? true : false;
      }
      if (relevantDiv.type === 'data') {
        document.getElementById(relevantDiv.id).innerHTML = jsonMessage[relevantDiv.param];
      }
    })
}

function createDivs(divs) {
  console.log(divs)
    for (var i = 0; i < divs.length; i++) {

      if (divs[i].type === "boolean") {
        let div = generateBooleanDiv(divs[i]);
        document.getElementById('devices').appendChild(div)
      }
      else if (divs[i].type === "onoff") {
        let div = generateOnOffDiv(divs[i]);
        document.getElementById('devices').appendChild(div)
      }
      else if (divs[i].type === "data") {
        let div = generateDataDiv(divs[i]);
        document.getElementById('devices').appendChild(div)
      }
    }
}

function generateBooleanDiv(device) {

    const container = document.createElement('div')
    container.className = 'device-container'
    const heading = document.createElement('h3')
    heading.innerHTML = device.name
    container.appendChild(heading)

    const i = document.createElement('i')
    i.className = "bi bi-check-circle-fill boolean-icon"
    i.id = device.id

    container.appendChild(i)
    container.appendChild(editDeleteButtons(device))

    return container
}

function generateOnOffDiv(device) {

    const container = document.createElement('div')
    container.className = 'device-container'
    const heading = document.createElement('h3')
    heading.innerHTML = device.name

    const label = document.createElement('label')
    label.className = "switch"

    const checkbox = document.createElement('input')
    checkbox.id = device.id
    checkbox.type = "checkbox"
    checkbox.disabled = true

    const line = document.createElement('span')
    line.className = "slider round"

    label.appendChild(checkbox)
    label.appendChild(line)

    container.appendChild(heading)
    container.appendChild(label)
    container.appendChild(editDeleteButtons(device))

    return container
}

function generateDataDiv(device) {

    const container = document.createElement('div')
    container.className = 'device-container'
    const heading = document.createElement('h3')
    heading.innerHTML = device.name

    const label = document.createElement('label')
    label.className = "data-label"
    label.id = device.id
    label.innerHTML = "Loading"

    container.appendChild(heading)
    container.appendChild(label)
    container.appendChild(editDeleteButtons(device))

    return container
}

function editDeleteButtons(device) {
    const buttons = document.createElement('div')
    buttons.className = 'device-buttons'

    const editButton = document.createElement('i')
    editButton.className = 'bi bi-pencil'
    //editButton.innerHTML = 'Edit'
    editButton.onclick = function() {
      window.location.href = '/editdevice/' + device.id
    }

    const deleteButton = document.createElement('i')
    deleteButton.className = 'bi bi-x-circle'
    //deleteButton.innerHTML = 'Delete'
    deleteButton.onclick = function() {
      window.location.href = '/deletedevice/' + device.id
    }

    buttons.appendChild(editButton)
    buttons.appendChild(deleteButton)

    return buttons
}

connect()
subscribe()

</script>



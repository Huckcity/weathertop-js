{{> authmenu id="locations"}}

<div id="devices"></div>

{{! Form to add an mqtt device subscription }}
<form action="/locations/{{location._id}}/add" method="POST">
  <label>Add a Device to <b>{{location.name}}</b></label>
  <div class="form-group">
    <label for="topic">Name</label>
    <input
      type="text"
      class="form-control"
      name="name"
      placeholder="Enter Device name"
    />
  </div>
    <div class="form-group">
        <label for="topic">Subscription</label>
        <input
        type="text"
        class="form-control"
        name="subscription"
        placeholder="Enter Device topic"
        />
  <div class="form-group">
    <label for="topic">Type</label>
    <select class="form-control" name="type">
      <option value="boolean">True/False</option>
      <option value="onoff">On/Off</option>
      <option value="data">Data Stream</option>
    </select>
  </div>
  <button type="submit" class="btn btn-primary">Submit</button>
</form>

<script>

let client;
let divs = [];

function connect() {    
    const host = 'ws://208.113.166.76:9001'

    const options = {
    keepalive: 30,
    //clientId: clientId,
    protocolId: 'MQTT',
    protocolVersion: 4,
    clean: true,
    reconnectPeriod: 1000,
    connectTimeout: 30 * 1000,
    will: {
        topic: 'WillMsg',
        payload: 'Connection Closed abnormally..!',
        qos: 0,
        retain: false
    },
    rejectUnauthorized: false
    }

    console.log('Connecting MQTT Client')
    client = mqtt.connect(host, options)

    client.on('error', (err) => {
    console.log('Connection error: ', err)
    client.end()
    })

    client.on('reconnect', () => {
    console.log('Reconnecting...')
    })

    client.on('connect', () => {
    console.log('Client Connected')
    })


    client.on('close', () => {
    console.log('Disconnected')
    })
}

function subscribe(topic) {
    //client.subscribe('zigbee2mqtt/MotionSensor', { qos: 0 })
    //client.publish('testtopic', 'ws connection demo...!', { qos: 0, retain: false })

    devices = {{{json location.devices}}};
    {{!-- console.log(devices) --}}
    for (var i = 0; i < devices.length; i++) {
        divs.push({
          id: devices[i]._id,
          name: devices[i].name,
          sub: devices[i].subscription,
          type: devices[i].type,
        });
        client.subscribe(devices[i].subscription, { qos: 0 })
    }

    createDivs(divs);

    client.on('message', (topic, message, packet) => {
      console.log('Received Message: ' + message.toString() + '\nOn topic: ' + topic)
      const jsonMessage = JSON.parse(message)
      //updateDiv(topic, jsonMessage)
    })
}

function createDivs(divs) {
    for (var i = 0; i < divs.length; i++) {

      console.log(divs[i])
      if (divs[i].type === "boolean") {
        let div = generateToggleDiv(divs[i]);
        div.id = divs[i].id
        document.getElementById('devices').appendChild(div)
      }
      else if (divs[i].type === "onoff") {
        let div = generateOnOffDiv(divs[i]);
        div.id = divs[i].id
        document.getElementById('devices').appendChild(div)
      }
      else if (divs[i].type === "data") {
        let div = generateDataDiv(divs[i]);
        div.id = divs[i].id
        document.getElementById('devices').appendChild(div)
      }
    }
}

function updateDiv(topic, message) {
    const div = document.getElementById(topic)
    div.innerHTML = message.occupancy
}

function generateToggleDiv(device) {

    const container = document.createElement('div')
    container.className = 'device-container'
    const heading = document.createElement('h3')
    heading.innerHTML = device.name
    container.appendChild(heading)

    const label = document.createElement('label')
    label.className = "switch"

    const checkbox = document.createElement('input')
    checkbox.type = "checkbox"
    checkbox.disabled = true

    const line = document.createElement('span')
    line.className = "slider round"

    label.appendChild(checkbox)
    label.appendChild(line)

    container.appendChild(label)

    return container
}

function generateOnOffDiv(device) {

    const container = document.createElement('div')
    container.className = 'device-container'
    const heading = document.createElement('h3')
    heading.innerHTML = device.name

    const label = document.createElement('label')
    label.className = "switch"

    const checkbox = document.createElement('input')
    checkbox.type = "checkbox"
    checkbox.disabled = true

    const line = document.createElement('span')
    line.className = "slider round"

    label.appendChild(checkbox)
    label.appendChild(line)

    container.appendChild(heading)
    container.appendChild(label)

    return container
}

function generateDataDiv(device) {

    const container = document.createElement('div')
    container.className = 'device-container'
    const heading = document.createElement('h3')
    heading.innerHTML = device.name

    const label = document.createElement('label')
    label.className = "data"

    container.appendChild(heading)
    container.appendChild(label)

    return container
}

connect()
subscribe()

</script>


